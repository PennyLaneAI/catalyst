// Copyright 2025 Xanadu Quantum Technologies Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
#include "mlir/Dialect/MemRef/IR/MemRef.h"
#include "mlir/IR/PatternMatch.h"

using namespace mlir;

namespace catalyst {

LLVM::AllocaOp getStaticAlloca(Location &loc, RewriterBase &rewriter, Type ty, Value value)
{
    // create an llvm.alloca operation at the end of the entry block of the current function.
    Block *insertionBlock = rewriter.getInsertionBlock();
    Region *parentRegion = insertionBlock->getParent();
    Block *entryBlock = &parentRegion->front();
    PatternRewriter::InsertionGuard insertGuard(rewriter);
    if (insertionBlock == entryBlock) {
        // If we are already in the entry basic block
        // we don't need to do anything fancy.
        // ... noop ...
    }
    else {
        // If we are not already in the entry basic block
        Operation *possible_terminator = entryBlock->getTerminator();
        assert(possible_terminator && "blocks must have a terminator");
        // Move the value at the beginning
        Operation *value_def = value.getDefiningOp();
        rewriter.moveOpBefore(value_def, &entryBlock->front());
        // place the insertion point close to the iterator
        rewriter.setInsertionPoint(possible_terminator);
        // There's a little bit of sublety here:
        // 1. The value is moved to the first instruction in the
        //    basic block, because another llvm.alloca may use that value.
        //    So we want to make sure that the value is always defined before
        //    any of its uses. If we place it just before the terminator,
        //    we may place it after one of its uses.
        //    We don't want any complex analysis as this is really fast.
        // 2. Technically we should get the backwards slice of value and move
        //    it to the top of the entry block. But... we shouldn't ever use
        //    dynamically sized arrays. So these values will always be either
        //    llvm.constant or llvm.gep (which are values generated by constant expressions).
        //    Therefore, we can safely move value to the beginning of the function.
    }
    return rewriter.create<LLVM::AllocaOp>(loc, LLVM::LLVMPointerType::get(rewriter.getContext()),
                                           ty, value);
}

LLVM::AllocaOp getStaticAlloca2(Location &loc, RewriterBase &rewriter, Type ty, Value value)
{
    // Same as above but it looks like there's a bug in the lowering (?)
    //
    // For some reason, I see two terminators. I believe the IR is in a broken state
    // while applying some patterns and we get a condition where we see two terminators.
    Block *insertionBlock = rewriter.getInsertionBlock();
    Region *parentRegion = insertionBlock->getParent();
    Block *entryBlock = &parentRegion->front();
    PatternRewriter::InsertionGuard insertGuard(rewriter);
    if (insertionBlock == entryBlock) {
        // ... noop ...
    }
    else {
        Operation *possible_terminator = entryBlock->getTerminator();
        assert(possible_terminator && "blocks must have a terminator");
        auto operation = entryBlock->rbegin();
        while (possible_terminator &&
               possible_terminator->mightHaveTrait<OpTrait::IsTerminator>()) {
            // This means that I have to get the "top most" terminator.
            possible_terminator = &(*operation++);
        }
        // we need it before the terminator
        Operation *value_def = value.getDefiningOp();
        rewriter.moveOpBefore(value_def, &entryBlock->front());
        rewriter.setInsertionPoint(possible_terminator);
    }
    return rewriter.create<LLVM::AllocaOp>(loc, LLVM::LLVMPointerType::get(rewriter.getContext()),
                                           ty, value);
}

mlir::memref::AllocaOp getStaticMemrefAlloca(Location &loc, RewriterBase &rewriter,
                                             MemRefType paramCountType)
{
    // Same as above but for memref.alloca instead of llvm.alloca
    Block *insertionBlock = rewriter.getInsertionBlock();
    Region *parentRegion = insertionBlock->getParent();
    Block *entryBlock = &parentRegion->front();
    PatternRewriter::InsertionGuard insertGuard(rewriter);
    if (insertionBlock == entryBlock) {
        // ... noop ...
    }
    else {
        Operation *possible_terminator = entryBlock->getTerminator();
        assert(possible_terminator && "blocks must have a terminator");
        // we need it before the terminator
        rewriter.setInsertionPoint(possible_terminator);
    }
    return rewriter.create<memref::AllocaOp>(loc, paramCountType);
}

} // namespace catalyst
