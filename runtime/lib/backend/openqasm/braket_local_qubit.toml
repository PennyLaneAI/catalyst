schema = 1

[device]
name = "braket.aws.qubit"

[operators]
# Observables supported by the device
observables = [
	"PauliX",
	"PauliY",
	"PauliZ",
	"Hadamard",
	"Hermitian",
	"Tensor",
]

# The union of all gate types listed in this section must match what
# the device considers "supported" through PennyLane's device API.
[[operators.gates]]
native = [
        "ISWAP",
        "PSWAP",
	"Hadamard",
        "PauliX",
        "PauliY",
        "PauliZ",
        "S",
        "T",
        "CNOT",
        "CZ",
        "SWAP",
        "PhaseShift",
        "RX",
        "RY",
        "RZ",
        "CSWAP",
	"QubitUnitary",
	"MS",
	"CY",
	"SX",
	"AAMS",
	"ECR",
	"GPi",
	"GPi2",
	"CPhaseShift00",
	"CPhaseShift01",
	"CPhaseShift10",
	"Identity",
	"IsingXX",
	"IsingXY",
	"IsingYY",
	"IsingZZ",
	"Toffoli",
	"ControlledPhaseShift",
]

# Operators that should be decomposed according to the algorithm used
# by PennyLane's device API.
# Optional, since gates not listed in this list will typically be decomposed by
# default, but can be useful to express a deviation from this device's regular
# strategy in PennyLane.
decomp = []

# Gates which should be translated to QubitUnitary
matrix = [
]

[measurement_processes]
exactshots = [
	"Expval",
	"Var",
	"Probs",
	"State",
]
finiteshots = [
	"Expval",
	"Var",
	"Probs",
	"Sample",
	"Counts",
]

[compilation]
# If the device is compatible with qjit
qjit_compatible = true
# If the device requires run time generation of the quantum circuit.
runtime_code_generation = true
# If the device supports adjoint
quantum_adjoint = false
# If the device supports quantum control instructions natively
quantum_control = false
# If the device supports mid circuit measurements natively
mid_circuit_measurement = false

# This field is currently unchecked but it is reserved for the purpose of
# determining if the device supports dynamic qubit allocation/deallocation.
dynamic_qubit_management = false 
