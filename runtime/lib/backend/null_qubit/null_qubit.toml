# Based on Lightning's lightning_qubit.toml. It is better if we keep it updated.
schema = 3

# The set of all gate types supported at the runtime execution interface of the
# device, i.e., what is supported by the `execute` method of the Device API.
# The gate definition has the following format:
#
#   GATE = { properties = [ PROPS ], conditions = [ CONDS ] }
#
# where PROPS and CONS are zero or more comma separated quoted strings.
#
# PROPS: zero or more comma-separated quoted strings:
#        - "controllable": if a controlled version of this gate is supported.
#        - "invertible": if the adjoint of this operation is supported.
#        - "differentiable": if device gradient is supported for this gate.
# CONDS: zero or more comma-separated quoted strings:
#        - "analytic" or "finiteshots": if this operation is only supported in
#          either analytic execution or with shots, respectively.
#        - "terms-commute": if this composite operator is only supported
#          given that its terms commute. Only relevant for Prod, SProd, Sum,
#          LinearCombination, and Hamiltonian.
#
[operators.gates]

CNOT                   = { properties = [ "invertible",                 "differentiable" ] }
ControlledPhaseShift   = { properties = [ "invertible",                 "differentiable" ] }
CRot                   = { properties = [ "invertible"                                   ] }
CRX                    = { properties = [ "invertible",                 "differentiable" ] }
CRY                    = { properties = [ "invertible",                 "differentiable" ] }
CRZ                    = { properties = [ "invertible",                 "differentiable" ] }
CSWAP                  = { properties = [ "invertible",                 "differentiable" ] }
CY                     = { properties = [ "invertible",                 "differentiable" ] }
CZ                     = { properties = [ "invertible",                 "differentiable" ] }
DoubleExcitationMinus  = { properties = [ "invertible", "controllable", "differentiable" ] }
DoubleExcitationPlus   = { properties = [ "invertible", "controllable", "differentiable" ] }
DoubleExcitation       = { properties = [ "invertible", "controllable", "differentiable" ] }
GlobalPhase            = { properties = [ "invertible", "controllable", "differentiable" ] }
Hadamard               = { properties = [ "invertible", "controllable", "differentiable" ] }
Identity               = { properties = [ "invertible",                 "differentiable" ] }
IsingXX                = { properties = [ "invertible", "controllable", "differentiable" ] }
IsingXY                = { properties = [ "invertible", "controllable", "differentiable" ] }
IsingYY                = { properties = [ "invertible", "controllable", "differentiable" ] }
IsingZZ                = { properties = [ "invertible", "controllable", "differentiable" ] }
MultiRZ                = { properties = [ "invertible", "controllable", "differentiable" ] }
PauliX                 = { properties = [ "invertible", "controllable", "differentiable" ] }
PauliY                 = { properties = [ "invertible", "controllable", "differentiable" ] }
PauliZ                 = { properties = [ "invertible", "controllable", "differentiable" ] }
PhaseShift             = { properties = [ "invertible", "controllable", "differentiable" ] }
QubitUnitary           = { properties = [ "invertible", "controllable"                   ] }
Rot                    = { properties = [ "invertible", "controllable"                   ] }
RX                     = { properties = [ "invertible", "controllable", "differentiable" ] }
RY                     = { properties = [ "invertible", "controllable", "differentiable" ] }
RZ                     = { properties = [ "invertible", "controllable", "differentiable" ] }
SingleExcitationMinus  = { properties = [ "invertible", "controllable", "differentiable" ] }
SingleExcitationPlus   = { properties = [ "invertible", "controllable", "differentiable" ] }
SingleExcitation       = { properties = [ "invertible", "controllable", "differentiable" ] }
S                      = { properties = [ "invertible", "controllable", "differentiable" ] }
SWAP                   = { properties = [ "invertible", "controllable", "differentiable" ] }
Toffoli                = { properties = [ "invertible",                 "differentiable" ] }
T                      = { properties = [ "invertible", "controllable", "differentiable" ] }

# Observables supported by the device
[operators.observables]

Identity               = { properties = [ "differentiable" ] }
PauliX                 = { properties = [ "differentiable" ] }
PauliY                 = { properties = [ "differentiable" ] }
PauliZ                 = { properties = [ "differentiable" ] }
Hadamard               = { properties = [ "differentiable" ] }
Hermitian              = { properties = [ "differentiable" ] }
Hamiltonian            = { properties = [ "differentiable" ] }
SparseHamiltonian      = { properties = [ "differentiable" ] }
Projector              = { properties = [ "differentiable" ] }
Sum                    = { properties = [ "differentiable" ] }
SProd                  = { properties = [ "differentiable" ] }
Prod                   = { properties = [ "differentiable" ] }
Exp                    = { properties = [ "differentiable" ] }
LinearCombination      = { properties = [ "differentiable" ] }

[measurement_processes]

ExpectationMP          = {}
VarianceMP             = {}
ProbabilityMP          = {}
StateMP                = { conditions = [ "analytic" ] }
SampleMP               = { conditions = [ "finiteshots" ] }
CountsMP               = { conditions = [ "finiteshots" ] }

[compilation]

# If the device is compatible with qjit
qjit_compatible = true
# If the device requires run time generation of the quantum circuit.
runtime_code_generation = false
# If the device supports mid-circuit measurements natively
supported_mcm_methods = [ "device", "one-shot" ]
# This field is currently unchecked, but it is reserved for the purpose of
# determining if the device supports dynamic qubit allocation/deallocation.
dynamic_qubit_management = false
# whether the device can support non-commuting measurements together
# in a single execution
non_commuting_observables = true
# Whether the device supports (arbitrary) initial state preparation.
initial_state_prep = true
