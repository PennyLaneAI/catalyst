name: Build Catalyst Wheel on Linux (x86_64)

on:
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:

jobs:
  build-dependencies:
    name: Build Dependencies
    runs-on: ubuntu-latest
    container: "quay.io/pypa/manylinux2014_x86_64"

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    # Build and cache LLVM / MLIR
    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Cache LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path:  llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-generic-build

    - name: Cache LLVM Source
      id: cache-llvm-source
      uses: actions/cache@v3
      with:
        path:  mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True

    - name: Set Ownership in Container
      run: |
        # To fix the git issue with the owner of the checkout dir
        chown -R $(id -u):$(id -g) $PWD

    - name: Clone LLVM Submodule
      if: steps.cache-llvm-source.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: llvm/llvm-project
        ref: ${{ steps.llvm-hash.outputs.llvm-hash }}
        path: mlir/llvm-project

    - name: Install dependencies (CentOS)
      run: |
        # Reduce wait time for repos not responding
        cat /etc/yum.conf | sed "s/\[main\]/\[main\]\ntimeout=5/g" > /etc/yum.conf
        yum update -y && yum install -y cmake ninja-build openmpi-devel

    - name: Build LLVM / MLIR
      if: steps.cache-llvm-build.outputs.cache-hit != 'true'
      run: |
        cmake -S mlir/llvm-project/llvm -B llvm-build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DLLVM_BUILD_EXAMPLES=OFF \
              -DLLVM_TARGETS_TO_BUILD="host" \
              -DLLVM_ENABLE_PROJECTS="lld;mlir" \
              -DLLVM_ENABLE_ASSERTIONS=ON \
              -DLLVM_INSTALL_UTILS=ON

        # TODO: when updating LLVM, test to see if mlir/unittests/Bytecode/BytecodeTest.cpp:55 is passing
        # and remove filter
        LIT_FILTER_OUT="Bytecode" cmake --build llvm-build --target lld check-mlir -j$(nproc)

    # Build and cache MHLO
    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Cache MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path:  mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-generic-build

    - name: Clone MHLO Submodule
      if:  |
        steps.cache-mhlo.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: tensorflow/mlir-hlo
        ref: ${{ steps.mhlo-hash.outputs.mhlo-hash }}
        path: mlir/mlir-hlo

    - name: Build MHLO Dialect
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      # building with LLD is a strong requirement for mhlo
      run: |
        export PATH=$GITHUB_WORKSPACE/llvm-build/bin:$PATH

        # TODO: We can remove this patch whenever this ticket is solved https://github.com/tensorflow/mlir-hlo/issues/68
        pushd mlir
        patch -d mlir-hlo/mhlo/analysis --merge --follow-symlinks < patches/add-lmhlo-dependency.patch
        popd

        cmake -S mlir/mlir-hlo -B mhlo-build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DLLVM_ENABLE_ASSERTIONS=ON \
              -DMLIR_DIR=$GITHUB_WORKSPACE/llvm-build/lib/cmake/mlir \
              -DLLVM_ENABLE_LLD=ON

        cmake --build mhlo-build --target check-mlir-hlo -j$(nproc)

    # Build Catalyst Runtime
    - name: Install rustup with llvm-tools-preview
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: llvm-tools-preview

    - name: Install QIR-stdlib
      run: |
          (cd ./runtime/qir-stdlib && cargo build --release)

    - name: Upload qir-stdlib artifact
      uses: actions/upload-artifact@v3
      with:
        name: qir-stdlib
        path: |
          runtime/qir-stdlib/target/release/*.a
          runtime/qir-stdlib/target/release/build/include/*.h
        retention-days: 1

  catalyst-linux-wheels-x86-64:
    needs: [build-dependencies]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [x86_64]
        python_version: ["3.8", "3.9", "3.10", "3.11"]
        container_img: ["quay.io/pypa/manylinux2014_x86_64"]

    name: Build Wheels (Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container_img }}

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Install dependencies (CentOS)
      run: |
        # Reduce wait time for repos not responding
        cat /etc/yum.conf | sed "s/\[main\]/\[main\]\ntimeout=5/g" > /etc/yum.conf
        yum update -y && yum install -y cmake ninja-build openmpi-devel

    - name: Install Dependencies (Python)
      run: |
        python${{ matrix.python_version }} -m pip install wheel numpy pybind11 PyYAML

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Source
      id: cache-llvm-source
      uses: actions/cache@v3
      with:
        path: mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True
        fail-on-cache-miss: True

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path:  llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-generic-build
        fail-on-cache-miss: True

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path:  mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-generic-build
        fail-on-cache-miss: True

    - name: Download QIR stdlib Artifact
      uses: actions/download-artifact@v3
      with:
        name: qir-stdlib
        path: runtime/qir-stdlib/target/release

    # Build MLIR Python Bindings
    - name: Build MLIR Python Bindings
      run: |
        cmake -S mlir/llvm-project/llvm -B llvm-build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DLLVM_BUILD_EXAMPLES=OFF \
              -DLLVM_TARGETS_TO_BUILD="host" \
              -DLLVM_ENABLE_PROJECTS="mlir" \
              -DLLVM_ENABLE_ASSERTIONS=ON \
              -DLLVM_INSTALL_UTILS=ON \
              -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
              -DPython3_EXECUTABLE=$(which python${{ matrix.python_version }}) \
              -DPython3_NumPy_INCLUDE_DIRS=$(python${{ matrix.python_version }} -c "import numpy as np; print(np.get_include())")

        # TODO: when updating LLVM, test to see if mlir/unittests/Bytecode/BytecodeTest.cpp:55 is passing
        # and remove filter
        LIT_FILTER_OUT="Bytecode" cmake --build llvm-build --target check-mlir -j$(nproc)

    # Build Quantum and Gradient Dialects
    - name: Build MLIR Dialects
      run: |
        cmake -S mlir -B quantum-build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DQUANTUM_ENABLE_BINDINGS_PYTHON=ON \
          -DPython3_EXECUTABLE=$(which python${{ matrix.python_version }}) \
          -DPython3_NumPy_INCLUDE_DIRS=$(python${{ matrix.python_version }} -c "import numpy as np; print(np.get_include())") \
          -DMLIR_DIR=$GITHUB_WORKSPACE/llvm-build/lib/cmake/mlir

        cmake --build quantum-build --target check-dialects -j$(nproc)
        patch -d quantum-build/python_packages/quantum/mlir_quantum --follow-symlinks < mlir/patches/use-ir-from-jax.patch
        patch -d quantum-build/python_packages/quantum/mlir_quantum/dialects --follow-symlinks < mlir/patches/use-cext-from-jax.patch
        patch -d quantum-build/python_packages/quantum/mlir_quantum/dialects --follow-symlinks < mlir/patches/do-not-infer-result.patch
        patch -d quantum-build/python_packages/quantum/mlir_quantum/dialects --follow-symlinks < mlir/patches/remove-gradient-cext-import.patch
        patch -d quantum-build/python_packages/quantum/mlir_quantum/dialects --follow-symlinks < mlir/patches/remove-quantum-cext-import.patch

    # Build Catalyst-Runtime
    - name: Build Catalyst-Runtime
      run: |
        cmake -S runtime -B runtime-build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DPYTHON_INCLUDE_DIRS=$(which python${{ matrix.python_version }}) \
          -DQIR_STDLIB_LIB=$GITHUB_WORKSPACE/runtime/qir-stdlib/target/release \
          -DQIR_STDLIB_INCLUDES=$GITHUB_WORKSPACE/runtime/qir-stdlib/target/release/build/include

        cmake --build runtime-build --target rt_capi -j$(nproc)

    # Requirements:
    - name: Prepare the python package
      run: |
        echo "INSTALLED = True" > $GITHUB_WORKSPACE/frontend/catalyst/_configuration.py
        # Copy bins to frontend/catalyst/bin
        mkdir -p $GITHUB_WORKSPACE/frontend/catalyst/bin
        cp $GITHUB_WORKSPACE/llvm-build/bin/llc $GITHUB_WORKSPACE/frontend/catalyst/bin
        cp $GITHUB_WORKSPACE/llvm-build/bin/mlir-translate $GITHUB_WORKSPACE/frontend/catalyst/bin
        cp $GITHUB_WORKSPACE/mhlo-build/bin/mlir-hlo-opt $GITHUB_WORKSPACE/frontend/catalyst/bin
        cp $GITHUB_WORKSPACE/quantum-build/bin/quantum-opt $GITHUB_WORKSPACE/frontend/catalyst/bin
        # Copy libs to frontend/catalyst/lib
        mkdir -p $GITHUB_WORKSPACE/frontend/catalyst/lib/backend/ $GITHUB_WORKSPACE/frontend/catalyst/lib/capi
        cp $GITHUB_WORKSPACE/runtime-build/lib/backend/librt_backend.so $GITHUB_WORKSPACE/frontend/catalyst/lib/backend/
        cp $GITHUB_WORKSPACE/runtime-build/lib/capi/librt_capi.so $GITHUB_WORKSPACE/frontend/catalyst/lib/capi
        cp --dereference $GITHUB_WORKSPACE/llvm-build/lib/libmlir_float16_utils.so.* $GITHUB_WORKSPACE/frontend/catalyst/lib
        cp --dereference $GITHUB_WORKSPACE/llvm-build/lib/libmlir_c_runner_utils.so* $GITHUB_WORKSPACE/frontend/catalyst/lib
        # Copy mlir bindings to frontend/mlir_quantum
        mkdir -p $GITHUB_WORKSPACE/frontend/mlir_quantum/dialects
        cp -R --dereference $GITHUB_WORKSPACE/quantum-build/python_packages/quantum/mlir_quantum/runtime $GITHUB_WORKSPACE/frontend/mlir_quantum/runtime
        cp --dereference $GITHUB_WORKSPACE/quantum-build/python_packages/quantum/mlir_quantum/ir.py $GITHUB_WORKSPACE/frontend/mlir_quantum/
        for file in arith tensor scf gradient quantum _ods_common ; do \
           cp --dereference $GITHUB_WORKSPACE/quantum-build/python_packages/quantum/mlir_quantum/dialects/*${file}* $GITHUB_WORKSPACE/frontend/mlir_quantum/dialects ; \
        done
        find $GITHUB_WORKSPACE/frontend -type d -name __pycache__ -exec rm -rf {} +

    - name: Build wheel
      run: |
        python${{ matrix.python_version }} setup.py bdist_wheel

    - name: Upload Wheel Artifact
      uses: actions/upload-artifact@v3
      with:
        name: catalyst-manylinux2014_x86_64-wheel-py-${{ matrix.python_version }}.zip
        path: dist/
        retention-days: 14

  test-wheels:
    needs: [catalyst-linux-wheels-x86-64]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python_version: ["3.8", "3.9", "3.10", "3.11"]
        container: ["quay.io/pypa/manylinux2014_x86_64", "ubuntu-20.04", "ubuntu-22.04"]

    # To check all wheels for supported python3 versions
    name: Test Wheels (Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Download Wheel Artifact
      uses: actions/download-artifact@v3
      with:
        name: catalyst-manylinux2014_x86_64-wheel-py-${{ matrix.python_version }}.zip
        path: dist

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install Python dependencies
      run: |
        python${{ matrix.python_version }} -m pip install wheel pytest pytest-xdist

    - name: Install Catalyst
      run: |
        python${{ matrix.python_version }} -m pip install $GITHUB_WORKSPACE/dist/*.whl

    - name: Run Python Pytest Tests
      run: |
        python${{ matrix.python_version }} -m pytest $GITHUB_WORKSPACE/frontend/test/pytest -n auto
