name: Setup PATH for Self-Hosted MacOS Runner
description: |
  This workflow sets up the workflow environment for the Self-Hosted MacOS runner. 
  It should be called right after actions/checkout.


inputs:
  python_version:
    description: Version of Python being used by the Job
    required: true

outputs:
  python_version:
    description: 'The version of Python that was setup'
    value: ${{ steps.python_venv.outputs.python_version }}
  python_path:
    description: 'Full absolute path to the python binary'
    value: ${{ steps.python_venv.outputs.python_path }}
  venv_location:
    description: 'The path to the virtualenv created for python'
    value: ${{ steps.python_venv.outputs.venv_location }}
  venv_site_packages:
    description: 'The path to the site-packages folder for the python venv created'
    value: ${{ steps.site_packages.outputs.site_packages_dir }}


runs:
  using: composite
  steps:

    # These environment variables ensure multi-threading workloads (ex: pytest-xdist)
    # work without any issues. Without them, the tests take hours to complete.
    - name: Setup MacOS Env Vars
      shell: bash
      run: |
        # The following two environment variables are set to ensure no threading related commands are blocked/slowed
        # by the OS. They may or may not be needed but added to ensure there are no slowdowns.
        echo 'no_proxy=*' >> $GITHUB_ENV
        echo 'OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES' >> $GITHUB_ENV
        
        # The following two flags are exported to ensure the correct homebrew installed libomp libraries are used
        # during build time.
        echo "LDFLAGS=-L/opt/homebrew/opt/libomp/lib $LDFLAGS" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/libomp/include $CPPFLAGS" >> $GITHUB_ENV


    # These binaries are added to PATH as there were issues adding them by default on job start
    - name: Add additional binaries to PATH
      shell: bash
      run: |
        additional_paths=("/opt/homebrew/bin" "$HOME/.pyenv/shims" "$HOME/.cargo/bin")
        for _path in ${additional_paths[@]};
        do
          [[ ":$PATH:" != *":$_path:"* ]] && echo "$_path" >> $GITHUB_PATH
        done
        echo "PYENV_ROOT=$HOME/.pyenv" >> $GITHUB_ENV

    - name: Setup Python ${{ inputs.python_version }}
      id: python_setup
      shell: bash
      env:
        input_python_version: ${{ inputs.python_version }}
      run: |
        # Check if the requested Python version exists on the runner
        pyenv versions | grep "$input_python_version"
        
        if [ $? -ne 0 ]; then
          echo "Installing Python $input_python_version"
          pyenv install "$input_python_version"
        fi

    - name: Setup Python venv
      id: python_venv
      shell: bash
      env:
        input_python_version: ${{ inputs.python_version }}
        venv_name: py_venv_${{ inputs.python_version }}_${{ github.sha }}
      run: |
        rm -rf "$venv_name"
        
        echo "$input_python_version" > "$GITHUB_WORKSPACE/.python-version"
        
        python -m venv "$venv_name"
        
        echo "$GITHUB_WORKSPACE/$venv_name/bin" >> $GITHUB_PATH
        echo "venv_location=$GITHUB_WORKSPACE/$venv_name" >> $GITHUB_OUTPUT
        
        PY_PATH="$GITHUB_WORKSPACE/$venv_name/bin/python"
        PY_VERSION=$(python --version)
        echo "python_path=$PY_PATH" >> $GITHUB_OUTPUT
        echo "python_version=$PY_VERSION" >> $GITHUB_OUTPUT

    - name: Get site-packages path
      id: site_packages
      shell: bash
      run: |
        echo "site_packages_dir=$(python -c 'import sysconfig; print(sysconfig.get_path("platlib"))')" >> $GITHUB_OUTPUT

    - name: Display Python Setup
      shell: bash
      run: |
        set -x
        which python
        which pip
        python --version
        pip --version
        set +x
