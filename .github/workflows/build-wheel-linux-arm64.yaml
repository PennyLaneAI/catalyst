name: Build Catalyst Wheel on Linux (arm64)

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
      - ready_for_review
  push:
    branches: [ main ]
  workflow_dispatch:
  workflow_call:

concurrency:
  group: Build Catalyst Wheel on Linux (arm64)-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_if_wheel_build_required:
    # if: github.event.pull_request.draft == false
    uses: ./.github/workflows/check-for-wheel-build.yml

  constants:
    needs: [check_if_wheel_build_required]
    # if: needs.check_if_wheel_build_required.outputs.build-wheels == 'true'
    name: "Set build matrix"
    uses: ./.github/workflows/constants.yaml

  build-dependencies:
    needs: [constants, check_if_wheel_build_required]

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        container_img: ["manylinux_2_31_armv7l"]

    name: Build Dependencies (Python ${{ matrix.python_version }})
    runs-on: ubuntu-22.04-arm
    container: quay.io/pypa/${{ matrix.container_img }}        

    # if: needs.check_if_wheel_build_required.outputs.build-wheels == 'true'

    steps:

      - name: Set up Node
        uses: actions/setup-node
        
      - name: Checkout Catalyst
        uses: actions/checkout@v4

      - name: Cache LLVM Source
        id: cache-llvm-source
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/mlir/llvm-project
          key: llvm-${{ needs.constants.outputs.llvm_version }}-container-source
          enableCrossOsArchive: True          

      - name: Cache MHLO Source
        id: cache-mhlo-source
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/mlir/mlir-hlo
          key: mhlo-${{ needs.constants.outputs.mhlo_version }}-container-source
          enableCrossOsArchive: True  

      - name: Cache Enzyme Source
        id: cache-enzyme-source
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/mlir/Enzyme
          key: enzyme-${{ needs.constants.outputs.enzyme_version }}-container-source
          enableCrossOsArchive: True

      - name: Clone LLVM Submodule
        if: steps.cache-llvm-source.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ needs.constants.outputs.llvm_version }}
          path: ${{ github.workspace }}/mlir/llvm-project

      - name: Clone MHLO Submodule
        if: steps.cache-mhlo-source.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: tensorflow/mlir-hlo
          ref: ${{ needs.constants.outputs.mhlo_version }}
          path: ${{ github.workspace }}/mlir/mlir-hlo
          
      - name: Clone Enzyme Submodule
        if: steps.cache-enzyme-source.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: EnzymeAD/Enzyme
          ref: ${{ needs.constants.outputs.enzyme_version }}
          path: ${{ github.workspace }}/mlir/Enzyme                  


      # Cache external project builds
      - name: Restore LLVM Build
        id: cache-llvm-build
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/llvm-build
          key: ${{ matrix.container_img }}-llvm-${{ needs.constants.outputs.llvm_version }}-${{matrix.python_version}}-wheel-build

      - name: Restore MHLO Build
        id: cache-mhlo-build
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/mhlo-build
          key: ${{ matrix.container_img }}-mhlo-${{ needs.constants.outputs.mhlo_version }}-wheel-build
          lookup-only: True

      - name: Restore Enzyme Build
        id: cache-enzyme-build
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/enzyme-build
          key: ${{ matrix.container_img }}-enzyme-${{ needs.constants.outputs.llvm_version }}-${{ needs.constants.outputs.enzyme_version }}-wheel-build
          lookup-only: True

      - name: Install dependencies
        # if: |
        #   steps.cache-llvm-build.outputs.cache-hit != 'true' ||
        #   steps.cache-mhlo-build.outputs.cache-hit != 'true' ||
        #   steps.cache-enzyme-build.outputs.cache-hit != 'true'
        run: |
          python${{ matrix.python_version }} -m pip install numpy nanobind pybind11 PyYAML cmake ninja

      - name: Build LLVM / MLIR
        if: steps.cache-llvm-build.outputs.cache-hit != 'true'
        run: |
          export PATH=$GITHUB_WORKSPACE/llvm-build/bin:$PATH
          PYTHON=$(which python${{ matrix.python_version }}) \
          C_COMPILER=$(which gcc) \
          CXX_COMPILER=$(which g++) \
          LLVM_BUILD_DIR="$GITHUB_WORKSPACE/llvm-build" \
          LLVM_PROJECTS="lld;mlir" \
          LLVM_TARGETS="lld check-mlir" \
          ENABLE_ZLIB=FORCE_ON \
          ENABLE_LLD=OFF \
          make llvm          

      - name: Save LLVM Build
        id: save-llvm-build
        if: steps.cache-llvm-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/llvm-build
          key: ${{ matrix.container_img }}-llvm-${{ needs.constants.outputs.llvm_version }}-${{matrix.python_version}}-wheel-build

      - name: Build MHLO Dialect
        if: steps.cache-mhlo-build.outputs.cache-hit != 'true'
        # building with LLD is a strong requirement for mhlo
        run: |
          export PATH=$GITHUB_WORKSPACE/llvm-build/bin:$PATH

          export TARGET_FILE=mlir/mlir-hlo/mhlo/transforms/CMakeLists.txt
          export PATCH_FILE=mlir/patches/mhlo-Add-PassesIncGen-in-transforms-CMakeList.patch
          if patch --dry-run -p1 -N $TARGET_FILE $PATCH_FILE > /dev/null 2>&1; then patch -p1 $TARGET_FILE $PATCH_FILE; fi

          cmake -S mlir/mlir-hlo -B $GITHUB_WORKSPACE/mhlo-build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_ENABLE_ASSERTIONS=ON \
                -DMLIR_DIR="$GITHUB_WORKSPACE/llvm-build/lib/cmake/mlir" \
                -DPython3_EXECUTABLE=$(which python${{ matrix.python_version }}) \
                -DLLVM_ENABLE_ZLIB=FORCE_ON \
                -DLLVM_ENABLE_ZSTD=OFF \
                -DCMAKE_CXX_VISIBILITY_PRESET=default \
                -DLLVM_ENABLE_LLD=ON

          LIT_FILTER_OUT="chlo_legalize_to_mhlo" cmake --build $GITHUB_WORKSPACE/mhlo-build --target check-mlir-hlo
          LIT_FILTER_OUT="chlo_legalize_to_mhlo" cmake --build $GITHUB_WORKSPACE/mhlo-build --target check-mlir-hlo
          LIT_FILTER_OUT="chlo_legalize_to_mhlo" cmake --build $GITHUB_WORKSPACE/mhlo-build --target check-mlir-hlo        

      - name: Save MHLO Build
        id: save-mhlo-build
        if: steps.cache-mhlo-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/mhlo-build
          key: ${{ matrix.container_img }}-mhlo-${{ needs.constants.outputs.mhlo_version }}-wheel-build


      - name: Build Enzyme
        if: steps.cache-enzyme-build.outputs.cache-hit != 'true'
        run: |
          export PATH=$GITHUB_WORKSPACE/llvm-build/bin:$PATH
          cmake -S mlir/Enzyme/enzyme -B $GITHUB_WORKSPACE/enzyme-build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_DIR="$GITHUB_WORKSPACE/llvm-build/lib/cmake/llvm" \
                -DENZYME_STATIC_LIB=ON \
                -DCMAKE_CXX_VISIBILITY_PRESET=default \
                -DCMAKE_CXX_FLAGS="-fuse-ld=lld"

          cmake --build $GITHUB_WORKSPACE/enzyme-build --target EnzymeStatic-19

      - name: Save Enzyme Build
        id: save-enzyme-build
        if: steps.cache-enzyme-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/enzyme-build
          key: ${{ matrix.container_img }}-enzyme-${{ needs.constants.outputs.llvm_version }}-${{ needs.constants.outputs.enzyme_version }}-wheel-build
