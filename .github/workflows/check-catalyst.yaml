name: Check Catalyst Build

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  qir-stdlib:
    name: QIR-stdlib Build
    runs-on: ubuntu-latest

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Catalyst repo
        uses: actions/checkout@v3

      - name: Cache qir-stdlib Build
        id: cache-qir-stdlib
        uses: actions/cache@v3
        with:
          path: qir-stdlib-build
          key: ${{ runner.os }}-qir-stdlib-build

      - name: Install rustup with llvm-tools-preview
        if: steps.cache-qir-stdlib.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Install QIR-stdlib
        if: steps.cache-qir-stdlib.outputs.cache-hit != 'true'
        run: |
            make qir
            mkdir -p qir-stdlib-build/include
            cp runtime/qir-stdlib/target/release/libqir_stdlib.a qir-stdlib-build/
            cp runtime/qir-stdlib/target/release/build/include/* qir-stdlib-build/include/

  runtime:
    name: Catalyst-Runtime Build
    needs: [qir-stdlib]
    runs-on: ubuntu-latest

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Catalyst repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get -y -q install ninja-build make cmake clang libomp-dev

      - name: Get Cached qir-stdlib Build
        id: cache-qir-stdlib
        uses: actions/cache@v3
        with:
          path: qir-stdlib-build
          key: Linux-qir-stdlib-build
          fail-on-cache-miss: True

      - name: Build Catalyst-Runtime
        run: |
          COMPILER_LAUNCHER="" \
          RT_BUILD_DIR="$(pwd)/runtime-build" \
          QIR_STDLIB_DIR="$(pwd)/qir-stdlib-build" \
          QIR_STDLIB_INCLUDES_DIR="$(pwd)/qir-stdlib-build/include" \
          ENABLE_LIGHTNING_KOKKOS=ON \
          make runtime

      - name: Upload Catalyst-Runtime Artifact
        uses: actions/upload-artifact@v3
        with:
          name: runtime-build
          path: |
            runtime-build/lib/capi/*.so
            runtime-build/lib/backend/*.so
          retention-days: 1

  llvm:
    name: LLVM Build
    runs-on: ubuntu-latest

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    # Both the LLVM source and build folder are required for further dialect builds.
    # Caching is significantly faster than git cloning since LLVM is such a large repository.

    - name: Cache LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build

    - name: Cache LLVM Source
      id: cache-llvm-source
      uses: actions/cache@v3
      with:
        path: mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True

    - name: Clone LLVM Submodule
      if: steps.cache-llvm-source.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: llvm/llvm-project
        ref: ${{ steps.llvm-hash.outputs.llvm-hash }}
        path: mlir/llvm-project

    - name: Install Deps
      if: steps.cache-llvm-build.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y python3 python3-pip cmake ninja-build clang lld
        python3 -m pip install numpy pybind11

    - name: Build LLVM
      if: steps.cache-llvm-build.outputs.cache-hit != 'true'
      # Note: Disable instrumentation for the mlir runtime support library,
      #       as user programs aren't instrumented.
      run: |
        # echo 'target_compile_options(mlir_c_runner_utils PRIVATE "-fno-sanitize=all")' \
        #       >> mlir/llvm-project/mlir/lib/ExecutionEngine/CMakeLists.txt
        LLVM_BUILD_DIR="$(pwd)/llvm-build" \
        COMPILER_LAUNCHER="" \
        make llvm

  mhlo:
    name: MHLO Dialect Build
    needs: [llvm]
    runs-on: ubuntu-latest

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Cache MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path: mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-build

    - name: Cache MHLO Source
      id: cache-mhlo-source
      uses: actions/cache@v3
      with:
        path: mlir/mlir-hlo
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-source
        enableCrossOsArchive: True

    - name: Get LLVM Version
      id: llvm-hash
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Source
      id: cache-llvm-source
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True
        fail-on-cache-miss: True

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Clone MHLO Submodule
      if: |
        steps.cache-mhlo.outputs.cache-hit != 'true' ||
        steps.cache-mhlo-source.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: tensorflow/mlir-hlo
        ref: ${{ steps.mhlo-hash.outputs.mhlo-hash }}
        path: mlir/mlir-hlo

    - name: Install Deps
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y cmake ninja-build clang lld

    - name: Build MHLO Dialect
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      run: |
        LLVM_BUILD_DIR="$(pwd)/llvm-build" \
        MHLO_BUILD_DIR="$(pwd)/mhlo-build" \
        COMPILER_LAUNCHER="" \
        make mhlo

  quantum:
    name: Quantum Dialects Build
    needs: [llvm, mhlo]
    runs-on: ubuntu-latest

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Install Deps
      run: |
        sudo apt-get install -y python3 python3-pip cmake ninja-build ccache clang lld
        python3 -m pip install numpy pybind11

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Source
      id: cache-llvm-source
      uses: actions/cache@v3
      with:
        path: mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True
        fail-on-cache-miss: True

    - name: Get Cached MHLO Source
      id: cache-mhlo-source
      uses: actions/cache@v3
      with:
        path: mlir/mlir-hlo
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-source
        enableCrossOsArchive: True
        fail-on-cache-miss: True

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Get Cached MHLO Build
      id: cache-mhlo-build
      uses: actions/cache@v3
      with:
        path: mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-build
        fail-on-cache-miss: True

    - name: Cache CCache
      id: cache-ccache
      uses: actions/cache@v3
      with:
        path: .ccache
        # TODO: revisit once actions/cache has an update feature
        #       https://github.com/actions/toolkit/issues/505
        #       this will load the latest available cache and generate a new one at the end
        key: ${{ runner.os }}-ccache-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Build MLIR Dialects
      run: |
        CCACHE_DIR="$(pwd)/.ccache" \
        LLVM_BUILD_DIR="$(pwd)/llvm-build" \
        MHLO_BUILD_DIR="$(pwd)/mhlo-build" \
        DIALECTS_BUILD_DIR="$(pwd)/quantum-build" \
        make dialects

    - name: Upload Quantum Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: quantum-build
        path: |
          quantum-build/bin
          quantum-build/lib/lib*.so*
          quantum-build/python_packages/*
        retention-days: 1

  frontend-tests:
    name: Frontend Tests
    needs: [runtime, mhlo, quantum]
    runs-on: ubuntu-latest

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Install Deps
      run: |
        sudo apt-get install -y python3 python3-pip libomp-dev
        python3 -m pip install -r requirements.txt
        python3 -m pip install .

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path: mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-build
        fail-on-cache-miss: True

    - name: Download Quantum Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: quantum-build
        path: quantum-build

    - name: Download Catalyst-Runtime Artifact
      uses: actions/download-artifact@v3
      with:
        name: runtime-build
        path: runtime-build/lib

    - name: Add Frontend Dependencies to PATH
      run: |
        echo "$(pwd)/llvm-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/mhlo-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/quantum-build/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)/quantum-build/python_packages/quantum" >> $GITHUB_ENV
        echo "RUNTIME_LIB_DIR=$(pwd)/runtime-build/lib" >> $GITHUB_ENV
        echo "MLIR_LIB_DIR=$(pwd)/llvm-build/lib" >> $GITHUB_ENV
        chmod +x quantum-build/bin/quantum-opt  # artifact upload does not preserve permissions

    - name: Run Python Lit Tests
      run: |
        llvm-lit -sv frontend/test/lit -j$(nproc)

    - name: Run Python Pytest Tests
      run: |
        # export ASAN_OPTIONS=detect_odr_violation=0
        COVERAGE_REPORT="xml:coverage.xml -p no:warnings" \
        make coverage-frontend
        mv coverage.xml coverage-${{ github.job }}.xml

    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check Catalyst Demos
      run: |
        MDD_BENCHMARK_PRECISION=1 \
        pytest demos --nbmake -n auto

  frontend-tests-lightning-kokkos:
    name: Frontend Tests (backend="lightning.kokkos")
    needs: [runtime, mhlo, quantum]
    runs-on: ubuntu-latest

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Install Deps
      run: |
        sudo apt-get install -y python3 python3-pip libomp-dev
        python3 -m pip install -r requirements.txt
        python3 -m pip install .

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path: mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-build
        fail-on-cache-miss: True

    - name: Download Quantum Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: quantum-build
        path: quantum-build

    - name: Download Catalyst-Runtime Artifact
      uses: actions/download-artifact@v3
      with:
        name: runtime-build
        path: runtime-build/lib

    - name: Add Frontend Dependencies to PATH
      run: |
        echo "$(pwd)/llvm-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/mhlo-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/quantum-build/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)/quantum-build/python_packages/quantum" >> $GITHUB_ENV
        echo "RUNTIME_LIB_DIR=$(pwd)/runtime-build/lib" >> $GITHUB_ENV
        echo "MLIR_LIB_DIR=$(pwd)/llvm-build/lib" >> $GITHUB_ENV
        chmod +x quantum-build/bin/quantum-opt  # artifact upload does not preserve permissions

    - name: Install lightning.kokkos used in Python tests
      run: |
        pip install PennyLane-Lightning-Kokkos

    - name: Run Python Pytest Tests (backend=lightning.kokkos)
      run: |
        make pytest TEST_BACKEND="lightning.kokkos"

  frontend-tests-openqasm-device:
    name: Frontend Tests (backend="openqasm3")
    needs: [qir-stdlib, mhlo, quantum]
    runs-on: ubuntu-latest

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Install Deps
      run: |
        sudo apt-get install -y python3 python3-pip libomp-dev ninja-build make cmake clang
        python3 -m pip install -r requirements.txt
        python3 -m pip install .

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path: mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-build
        fail-on-cache-miss: True

    - name: Download Quantum Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: quantum-build
        path: quantum-build

    - name: Install awscli (OpenQasm device)
      id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2

    - name: Install additional dependencies (OpenQasm device)
      run: |
        # TODO: Use the latest version of boto3 after fixing the issue with
        # "Device SV1 does not support quantum circuits" from braket-pl-plugin.
        pip install numpy amazon-braket-sdk amazon-braket-pennylane-plugin "boto3==1.26"
        echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV

    - name: Get Cached qir-stdlib Build
      id: cache-qir-stdlib
      uses: actions/cache@v3
      with:
        path: qir-stdlib-build
        key: Linux-qir-stdlib-build
        fail-on-cache-miss: True

    - name: Build Catalyst-Runtime
      run: |
        COMPILER_LAUNCHER="" \
        ENABLE_OPENQASM=ON \
        RT_BUILD_DIR="$(pwd)/runtime-build" \
        QIR_STDLIB_DIR="$(pwd)/qir-stdlib-build" \
        QIR_STDLIB_INCLUDES_DIR="$(pwd)/qir-stdlib-build/include" \
        CMAKE_ARGS="-DENABLE_OPENMP=ON" \
        make runtime

    - name: Add Frontend Dependencies to PATH
      run: |
        echo "$(pwd)/llvm-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/mhlo-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/quantum-build/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)/quantum-build/python_packages/quantum" >> $GITHUB_ENV
        echo "RUNTIME_LIB_DIR=$(pwd)/runtime-build/lib" >> $GITHUB_ENV
        echo "MLIR_LIB_DIR=$(pwd)/llvm-build/lib" >> $GITHUB_ENV
        chmod +x quantum-build/bin/quantum-opt  # artifact upload does not preserve permissions

    - name: Run Python Pytest Tests
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_BRAKET_DEVICE_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_BRAKET_DEVICE_ACCESS_KEY }}
      run: |
        make pytest TEST_BRAKET=ON

  runtime-tests:
    name: Runtime Tests (Linux)
    needs: [qir-stdlib]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        simulator: ['lightning', 'lightning-kokkos', 'openqasm']

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get -y -q install cmake ninja-build libomp-dev lcov

      - name: Install awscli (OpenQasm device)
        if: ${{ matrix.simulator == 'openqasm' }}
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Install additional dependencies (OpenQasm device)
        if: ${{ matrix.simulator == 'openqasm' }}
        run: |
          pip install numpy amazon-braket-sdk
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV

      - name: Get Cached qir-stdlib Build
        id: cache-qir-stdlib
        uses: actions/cache@v3
        with:
          path: qir-stdlib-build
          key: Linux-qir-stdlib-build
          fail-on-cache-miss: True

      - name: Build Runtime test suite for Lightning simulator
        if: ${{ matrix.simulator == 'lightning' }}
        run: |
            C_COMPILER=$(which gcc) \
            CXX_COMPILER=$(which g++) \
            COMPILER_LAUNCHER="" \
            QIR_STDLIB_DIR="$(pwd)/qir-stdlib-build" \
            QIR_STDLIB_INCLUDES_DIR="$(pwd)/qir-stdlib-build/include" \
            make coverage-runtime
            mv runtime/build/coverage.info coverage-${{ github.job }}.info

      - name: Build Runtime test suite for Lightning-Kokkos simulator
        if: ${{ matrix.simulator == 'lightning-kokkos' }}
        run: |
            C_COMPILER=$(which gcc) \
            CXX_COMPILER=$(which g++) \
            COMPILER_LAUNCHER="" \
            QIR_STDLIB_DIR="$(pwd)/qir-stdlib-build" \
            QIR_STDLIB_INCLUDES_DIR="$(pwd)/qir-stdlib-build/include" \
            ENABLE_LIGHTNING_KOKKOS=ON \
            CMAKE_ARGS="-DKokkos_ENABLE_OPENMP=ON" \
            make test-runtime

      - name: Build Runtime test suite for OpenQasm device
        if: ${{ matrix.simulator == 'openqasm' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_BRAKET_DEVICE_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_BRAKET_DEVICE_ACCESS_KEY }}
        run: |
            C_COMPILER=$(which gcc) \
            CXX_COMPILER=$(which g++) \
            COMPILER_LAUNCHER="" \
            ENABLE_OPENQASM=ON \
            QIR_STDLIB_DIR="$(pwd)/qir-stdlib-build" \
            QIR_STDLIB_INCLUDES_DIR="$(pwd)/qir-stdlib-build/include" \
            make test-runtime

      - name: Upload to Codecov
        if: ${{ matrix.simulator == 'lightning' }}
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build examples
        if: ${{ matrix.simulator == 'lightning' }}
        run: |
          C_COMPILER=$(which gcc) \
          CXX_COMPILER=$(which g++) \
          COMPILER_LAUNCHER="" \
          QIR_STDLIB_DIR="$(pwd)/qir-stdlib-build" \
          QIR_STDLIB_INCLUDES_DIR="$(pwd)/qir-stdlib-build/include" \
          make examples-runtime
