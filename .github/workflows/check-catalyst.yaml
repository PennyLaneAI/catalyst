name: Check Catalyst Build

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  COVERAGE_FLAGS: "--cov=catalyst --cov-report=term-missing --cov-report=xml:./coverage.xml -p no:warnings --tb=native"

jobs:
  llvm:
    name: LLVM Build
    runs-on: ubuntu-latest
    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    # Both the LLVM source and build folder are required for further dialect builds.
    # Caching is significantly faster than git cloning since LLVM is such a large repository.

    - name: Cache LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path:  llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build

    - name: Cache LLVM Source
      id: cache-llvm-source
      uses: actions/cache@v3
      with:
        path:  mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True

    - name: Clone LLVM Submodule
      if: |
        steps.cache-llvm-source.outputs.cache-hit != 'true'
      run: |
        git submodule update --init mlir/llvm-project
        [ $(cd mlir/llvm-project && git rev-parse HEAD) == ${{ steps.llvm-hash.outputs.llvm-hash }} ]

    - name: Install Deps
      if: steps.cache-llvm-build.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y python3 python3-pip cmake ninja-build clang lld
        python3 -m pip install numpy pybind11

    - name: Build LLVM
      if: steps.cache-llvm-build.outputs.cache-hit != 'true'
      # Note: Disable instrumentation for the mlir runtime support library,
      #       as user programs aren't instrumented.
      run: |
        # echo 'target_compile_options(mlir_c_runner_utils PRIVATE "-fno-sanitize=all")' \
        #       >> mlir/llvm-project/mlir/lib/ExecutionEngine/CMakeLists.txt
        cmake -S mlir/llvm-project/llvm -B llvm-build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DLLVM_BUILD_EXAMPLES=OFF \
              -DLLVM_TARGETS_TO_BUILD="host" \
              -DLLVM_ENABLE_PROJECTS="mlir" \
              -DLLVM_ENABLE_ASSERTIONS=ON \
              -DLLVM_INSTALL_UTILS=ON \
              -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
              -DPython3_EXECUTABLE=/usr/bin/python3 \
              -DPython3_NumPy_INCLUDE_DIRS=$(python3 -c "import numpy as np; print(np.get_include())") \
              -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON
              # -DLLVM_USE_SANITIZER="Address;Undefined"
        cmake --build llvm-build --target check-mlir -j$(nproc)

  quantum:
    name: Quantum Dialects Build
    needs: llvm
    runs-on: ubuntu-latest
    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Install Deps
      run: |
        sudo apt-get install -y python3 python3-pip cmake ninja-build ccache clang lld
        python3 -m pip install numpy pybind11

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Source
      id: cache-llvm-source
      uses: actions/cache@v3
      with:
        path: mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True
        fail-on-cache-miss: True

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Cache CCache
      id: cache-ccache
      uses: actions/cache@v3
      with:
        path: .ccache
        # TODO: revisit once actions/cache has an update feature
        #       this will load the latest available cache and generate a new one at the end
        key: ${{ runner.os }}-ccache-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-ccache-

    - name: Build MLIR Dialects
      run: |
        export CCACHE_DIR=$GITHUB_WORKSPACE/.ccache
        cmake -S mlir -B quantum-build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DLLVM_ENABLE_ASSERTIONS=ON \
              -DQUANTUM_ENABLE_BINDINGS_PYTHON=ON \
              -DPython3_EXECUTABLE=/usr/bin/python3 \
              -DMLIR_DIR=$GITHUB_WORKSPACE/llvm-build/lib/cmake/mlir \
              -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
              # -DLLVM_USE_SANITIZER="Address;Undefined"
        cmake --build quantum-build --target check-dialects -j$(nproc)

    - name: Upload Quantum Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: quantum-build
        path: |
          quantum-build/bin
          quantum-build/lib/lib*.so*
          quantum-build/python_packages/*
        retention-days: 1

  mhlo:
    name: MHLO Dialect Build
    needs: llvm
    runs-on: ubuntu-latest
    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Cache MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path:  mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-build

    - name: Get LLVM Version
      id: llvm-hash
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Source
      id: cache-llvm-source
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path:  mlir/llvm-project
        key: Linux-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-source
        enableCrossOsArchive: True
        fail-on-cache-miss: True

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path:  llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Clone MHLO Submodule
      if:  |
        steps.cache-mhlo.outputs.cache-hit != 'true' &&
        steps.cache-mhlo-source.outputs.cache-hit != 'true'
      run: |
        git submodule update --init mlir/mlir-hlo
        [ $(cd mlir/mlir-hlo && git rev-parse HEAD) == ${{ steps.mhlo-hash.outputs.mhlo-hash }} ]

    - name: Install Deps
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y cmake ninja-build clang lld

    - name: Build MHLO Dialect
      if: steps.cache-mhlo.outputs.cache-hit != 'true'
      run: |
        cmake -S mlir/mlir-hlo -B mhlo-build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DLLVM_ENABLE_ASSERTIONS=ON \
              -DMLIR_DIR=$GITHUB_WORKSPACE/llvm-build/lib/cmake/mlir \
              -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON
              # -DLLVM_USE_SANITIZER="Address;Undefined"
        cmake --build mhlo-build --target check-mlir-hlo -j$(nproc)

  runtime-qir-stdlib:
    name: Catalyst-Runtime (qir-stdlib)
    runs-on: ubuntu-latest

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Catalyst repo
        uses: actions/checkout@v3

      - name: Install rustup with llvm-tools-preview
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Install QIR-stdlib
        run: |
            cd ./runtime/qir-stdlib
            cargo build --release --verbose
            mkdir -p ../qir-stdlib-build/include
            cp ./target/release/libqir_stdlib.a ../qir-stdlib-build/
            cp ./target/release/build/include/* ../qir-stdlib-build/include/
            cargo clean

      - name: Upload QIR-stdlib Artifact
        uses: actions/upload-artifact@v3
        with:
          name: qir-stdlib-build
          path: ./runtime/qir-stdlib-build
          retention-days: 1

  runtime:
    name: Catalyst-Runtime
    needs: runtime-qir-stdlib
    runs-on: ubuntu-latest

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Catalyst repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get -y -q install ninja-build make cmake clang libomp-dev
          echo "LIGHTNING_GIT_TAG_VALUE=latest_release" >> $GITHUB_ENV
      - if: ${{ github.event_name == 'push' }}
        run: |
          echo "LIGHTNING_GIT_TAG_VALUE=master" >> $GITHUB_ENV

      - name: Download QIR-stdlib Artifact
        uses: actions/download-artifact@v3
        with:
          name: qir-stdlib-build
          path: ./runtime/qir-stdlib-build

      - name: Build Catalyst-Runtime
        run: |
          cmake -S runtime -B runtime-build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=clang \
                -DCMAKE_CXX_COMPILER=clang++ \
                -DLIGHTNING_GIT_TAG=$LIGHTNING_GIT_TAG_VALUE \
                -DQIR_STDLIB_LIB="$(pwd)/runtime/qir-stdlib-build/" \
                -DQIR_STDLIB_INCLUDES="$(pwd)/runtime/qir-stdlib-build/include/"
          cmake --build runtime-build --target rt_capi -j$(nproc)

      - name: Upload Catalyst-Runtime Artifact
        uses: actions/upload-artifact@v3
        with:
          name: runtime-build
          path: |
            runtime-build/lib/capi/*.so
            runtime-build/lib/backend/*.so
          retention-days: 1

  runtime-tests:
    strategy:
      matrix:
        os: [ubuntu-latest]
        simulator: ['lightning', 'lightning-kokkos']

    name: Runtime Tests (Linux)
    needs: runtime-qir-stdlib
    runs-on: ${{ matrix.os }}

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get -y -q install cmake ninja-build gcc-10 g++-10 libomp-dev lcov
          echo "LIGHTNING_GIT_TAG_VALUE=latest_release" >> $GITHUB_ENV
      - if: ${{ github.event_name == 'push' }}
        run: |
          echo "LIGHTNING_GIT_TAG_VALUE=master" >> $GITHUB_ENV

      - name: Download QIR-stdlib Artifact
        uses: actions/download-artifact@v3
        with:
          name: qir-stdlib-build
          path: ./runtime/qir-stdlib-build

      - name: Build Runtime test suite for Lightning simulator
        if: ${{ matrix.simulator == 'lightning' }}
        run: |
            cmake -S runtime -B build -G Ninja \
                  -DCMAKE_BUILD_TYPE=Debug \
                  -DENABLE_LIGHTNING_KOKKOS=OFF \
                  -DLIGHTNING_GIT_TAG=$LIGHTNING_GIT_TAG_VALUE \
                  -DQIR_STDLIB_LIB="$(pwd)/runtime/qir-stdlib-build/" \
                  -DQIR_STDLIB_INCLUDES="$(pwd)/runtime/qir-stdlib-build/include/" \
                  -DENABLE_CODE_COVERAGE=ON
            cmake --build build --target runner_tests -j$(nproc)

      - name: Build Runtime test suite for Lightning-Kokkos simulator
        if: ${{ matrix.simulator == 'lightning-kokkos' }}
        run: |
            cmake -S runtime -B build -G Ninja \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DENABLE_LIGHTNING_KOKKOS=ON \
                  -DQIR_STDLIB_LIB="$(pwd)/runtime/qir-stdlib-build/" \
                  -DQIR_STDLIB_INCLUDES="$(pwd)/runtime/qir-stdlib-build/include/"
            cmake --build build --target runner_tests -j$(nproc)

      - name: Run tests
        run: |
            ./build/tests/runner_tests -s

      - name: Runtime Code Coverage
        if: ${{ matrix.simulator == 'lightning' }}
        run: |
            lcov --directory build -b ./runtime/lib --capture --output-file build/coverage.info
            lcov --remove build/coverage.info '/usr/*' '*/_deps/*' --output-file build/coverage.info
            mv build/coverage.info coverage-${{ github.job }}.info

      - name: Upload code coverage results
        if: ${{ matrix.simulator == 'lightning' }}
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp
          path: ./coverage-${{ github.job }}.info

      - name: Build examples
        if: ${{ matrix.simulator == 'lightning' }}
        run: |
          cd ./runtime/examples && make all BUILD_DIR=../../build

      - name: Create tests report
        run: |
            mkdir -p ./build/tests/results
            ./build/tests/runner_tests --reporter junit --out ./build/tests/results/tests_result.xml

      - name: Upload tests
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: runtime-linux-test-report
          path: ./build/tests/results/tests_result.xml

  frontend:
    name: Frontend Tests
    needs: [llvm, mhlo, quantum, runtime]
    runs-on: ubuntu-latest
    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout Catalyst repo
      uses: actions/checkout@v3

    - name: Get JAX Version
      id: jax-version
      run: echo "v=$(grep jax .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Install Deps
      run: |
        sudo apt-get install -y python3 python3-pip libomp-dev
        python3 -m pip install lit pytest pytest-xdist pytest-cov nbconvert ipykernel
        python3 -m pip install jax==${{ steps.jax-version.outputs.v }} jaxlib==${{ steps.jax-version.outputs.v }}
        python3 -m pip install .

    - name: Install PennyLane-master
      if: ${{ github.event_name == 'push' }}
      uses: actions/checkout@v3
      with:
        repository: PennyLaneAI/pennylane
        path: pennylane
    - if: ${{ github.event_name == 'push' }}
      run: |
        python3 -m pip install --upgrade ./pennylane

    - name: Get LLVM Version
      id: llvm-hash
      run: echo "llvm-hash=$(grep llvm .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached LLVM Build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path:  llvm-build
        key: ${{ runner.os }}-llvm-${{ steps.llvm-hash.outputs.llvm-hash }}-default-build
        fail-on-cache-miss: True

    - name: Get MHLO Version
      id: mhlo-hash
      run: echo "mhlo-hash=$(grep mhlo .dep-versions | awk -F '=' '{ print $2 }')" >> $GITHUB_OUTPUT

    - name: Get Cached MHLO Build
      id: cache-mhlo
      uses: actions/cache@v3
      with:
        path:  mhlo-build
        key: ${{ runner.os }}-mhlo-${{ steps.mhlo-hash.outputs.mhlo-hash }}-default-build
        fail-on-cache-miss: True

    - name: Download Quantum Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: quantum-build
        path: quantum-build

    - name: Caching System Files Workaround
      run: |  # TODO: revisit once actions/cache has a sudo option
        sudo mv /usr/bin/tar /usr/bin/tar.orig
        printf '#!/bin/sh\nexec sudo /usr/bin/tar.orig "$@"\n' | sudo tee /usr/bin/tar
        sudo chmod +x /usr/bin/tar

    - name: Download Catalyst-Runtime Artifact
      uses: actions/download-artifact@v3
      with:
        name: runtime-build
        path: runtime-build/lib

    - name: Add Frontend Dependencies to PATH
      run: |
        echo "$(pwd)/llvm-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/mhlo-build/bin" >> $GITHUB_PATH
        echo "$(pwd)/quantum-build/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PYTHONPATH:$(pwd)/quantum-build/python_packages/quantum" >> $GITHUB_ENV
        echo "RUNTIME_LIB_DIR=$(pwd)/runtime-build/lib" >> $GITHUB_ENV
        echo "MLIR_LIB_DIR=$(pwd)/llvm-build/lib" >> $GITHUB_ENV
        chmod +x quantum-build/bin/quantum-opt  # artifact upload does not preserve permissions

    - name: Run Python Lit Tests
      run: |
        llvm-lit -sv frontend/test/lit -j$(nproc)

    - name: Run Python Pytest Tests
      run: |
        export ASAN_OPTIONS=detect_odr_violation=0
        pytest frontend/test/pytest -n auto $COVERAGE_FLAGS
        mv coverage.xml coverage-${{ github.job }}.xml

    - name: Upload code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-codecov-results-python
        path: ./coverage-${{ github.job }}.xml

  upload-to-codecov-linux-python:
    needs: [frontend]
    name: Upload coverage data to codecov (Python)
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-codecov-results-python

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  upload-to-codecov-linux-cpp:
    needs: [runtime-tests]
    name: Upload coverage data to codecov (C++)
    runs-on: ubuntu-latest

    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-codecov-results-cpp

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
